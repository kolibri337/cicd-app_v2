stages:
  - build
  - test
  - cleanup
  - push

build:
  stage: build
  script:
    - docker build -t $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_COMMIT_REF_SLUG.$CI_PIPELINE_ID .

test:
  stage: test
  image:
    name: docker/compose:1.29.2
    entrypoint: [""]
  script:
    - docker-compose 
        -p "$CI_PROJECT_NAME"_"$CI_PIPELINE_ID"
      up
        --abort-on-container-exit
        --exit-code-from test
        --quiet-pull

cleanup:
  stage: cleanup
  image:
    name: docker/compose:1.29.2
    entrypoint: [""]
  script:
    - docker-compose -p "$CI_PROJECT_NAME"_"$CI_PIPELINE_ID" down
  when: always

push:
  stage: push
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_COMMIT_REF_SLUG.$CI_PIPELINE_ID
  only:
    - main

deploy:
  stage: deploy
  before_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $PRODUCTION_SERVER_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh root@"$PRODUCTION_SERVER_IP" "echo $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY;
      docker stop app; docker rm app;
      docker run --name app
      -p 80:8080
      -d $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_COMMIT_REF_SLUG.$CI_PIPELINE_ID"
  only:
    - main